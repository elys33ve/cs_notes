

%d %d
< 7



// phase 3
   0x000000000000166d <+0>:	endbr64 
   0x0000000000001671 <+4>:	sub    $0x18,%rsp
   0x0000000000001675 <+8>:	mov    %fs:0x28,%rax
   0x000000000000167e <+17>:	mov    %rax,0x8(%rsp)
   0x0000000000001683 <+22>:	xor    %eax,%eax
   0x0000000000001685 <+24>:	lea    0x4(%rsp),%rcx
   0x000000000000168a <+29>:	mov    %rsp,%rdx
   0x000000000000168d <+32>:	lea    0x1d28(%rip),%rsi        # 0x33bc

   0x0000000000001694 <+39>:	call   0x12f0 <__isoc99_sscanf@plt>
   0x0000000000001699 <+44>:	cmp    $0x1,%eax
   0x000000000000169c <+47>:	    jle    0x16bc <phase_3+79>      // CRASH

   0x000000000000169e <+49>:	cmpl   $0x7,(%rsp)
   0x00000000000016a2 <+53>:	    ja     0x1742 <phase_3+213>     // CRASH
   0x00000000000016a8 <+59>:	mov    (%rsp),%eax
   0x00000000000016ab <+62>:	lea    0x1aae(%rip),%rdx        # 0x3160
   0x00000000000016b2 <+69>:	movslq (%rdx,%rax,4),%rax
   0x00000000000016b6 <+73>:	add    %rdx,%rax
   0x00000000000016b9 <+76>:	notrack jmp *%rax


   0x00000000000016bc <+79>:	call   0x1dea <crash_program>
   0x00000000000016c1 <+84>:	jmp    0x169e <phase_3+49>          // check rsp
   0x00000000000016c3 <+86>:	mov    $0x147,%eax
   0x00000000000016c8 <+91>:	sub    $0x137,%eax
   0x00000000000016cd <+96>:	add    $0xb5,%eax
   0x00000000000016d2 <+101>:	sub    $0x213,%eax
   0x00000000000016d7 <+106>:	add    $0x213,%eax
   0x00000000000016dc <+111>:	sub    $0x213,%eax
   0x00000000000016e1 <+116>:	add    $0x213,%eax
   0x00000000000016e6 <+121>:	sub    $0x213,%eax
   0x00000000000016eb <+126>:	cmpl   $0x5,(%rsp)
   0x00000000000016ef <+130>:	    jg     0x16f7 <phase_3+138>     // CRASH
   0x00000000000016f1 <+132>:	cmp    %eax,0x4(%rsp)
   0x00000000000016f5 <+136>:	    je     0x16fc <phase_3+143>
   0x00000000000016f7 <+138>:	call   0x1dea <crash_program>
   0x00000000000016fc <+143>:	mov    0x8(%rsp),%rax
   0x0000000000001701 <+148>:	xor    %fs:0x28,%rax
   0x000000000000170a <+157>:	jne    0x174e <phase_3+225>         // CRASH
   0x000000000000170c <+159>:	add    $0x18,%rsp
   0x0000000000001710 <+163>:	ret    

   0x0000000000001711 <+164>:	mov    $0x0,%eax
   0x0000000000001716 <+169>:	jmp    0x16c8 <phase_3+91>
   0x0000000000001718 <+171>:	mov    $0x0,%eax
   0x000000000000171d <+176>:	jmp    0x16cd <phase_3+96>
   0x000000000000171f <+178>:	mov    $0x0,%eax
   0x0000000000001724 <+183>:	jmp    0x16d2 <phase_3+101>
   0x0000000000001726 <+185>:	mov    $0x0,%eax
   0x000000000000172b <+190>:	jmp    0x16d7 <phase_3+106>
   0x000000000000172d <+192>:	mov    $0x0,%eax
   0x0000000000001732 <+197>:	jmp    0x16dc <phase_3+111>
   0x0000000000001734 <+199>:	mov    $0x0,%eax
   0x0000000000001739 <+204>:	jmp    0x16e1 <phase_3+116>
   0x000000000000173b <+206>:	mov    $0x0,%eax
   0x0000000000001740 <+211>:	jmp    0x16e6 <phase_3+121>
   0x0000000000001742 <+213>:	call   0x1dea <crash_program>
   0x0000000000001747 <+218>:	mov    $0x0,%eax
   0x000000000000174c <+223>:	jmp    0x16eb <phase_3+126>
   0x000000000000174e <+225>:	call   0x1250 <__stack_chk_fail@plt>

// rsp0 = first 4 bytes, rsp1 = next 4 bytes, ...
// input b1 < 0x7
// %d %d


rsp = input
rax = stack fail

rsp2 = rax
eax = 0
rcx = rsp1
rdx = input
rsi = rip + 0x1d28

<scanf>

eax = size
check input size > 1

check input < 0x7

eax = input

rdx = rip + 0x1aae
rax = 0x00000000 [rdx + (rax * 4)] + rdx




   0x000055555555566d <+0>:	endbr64 
   0x0000555555555671 <+4>:	sub    $0x18,%rsp
   0x0000555555555675 <+8>:	mov    %fs:0x28,%rax
   0x000055555555567e <+17>:	mov    %rax,0x8(%rsp)
   0x0000555555555683 <+22>:	xor    %eax,%eax
   0x0000555555555685 <+24>:	lea    0x4(%rsp),%rcx
   0x000055555555568a <+29>:	mov    %rsp,%rdx
   0x000055555555568d <+32>:	lea    0x1d28(%rip),%rsi        # 0x5555555573bc
   0x0000555555555694 <+39>:	call   0x5555555552f0 <__isoc99_sscanf@plt>
   0x0000555555555699 <+44>:	cmp    $0x1,%eax
   0x000055555555569c <+47>:	jle    0x5555555556bc <phase_3+79>
   0x000055555555569e <+49>:	cmpl   $0x7,(%rsp)
   0x00005555555556a2 <+53>:	ja     0x555555555742 <phase_3+213>
   0x00005555555556a8 <+59>:	mov    (%rsp),%eax
   0x00005555555556ab <+62>:	lea    0x1aae(%rip),%rdx        # 0x555555557160
   0x00005555555556b2 <+69>:	movslq (%rdx,%rax,4),%rax
   0x00005555555556b6 <+73>:	add    %rdx,%rax
=> 0x00005555555556b9 <+76>:	notrack jmp *%rax
 
   0x00005555555556bc <+79>:	call   0x555555555dea <crash_program>
   0x00005555555556c1 <+84>:	jmp    0x55555555569e <phase_3+49>
   0x00005555555556c3 <+86>:	mov    $0x147,%eax
+327 = -384
   0x00005555555556c8 <+91>:	sub    $0x137,%eax
-331 = -711
   0x00005555555556cd <+96>:	add    $0xb5,%eax
+181 = -380
   0x00005555555556d2 <+101>:	sub    $0x213,%eax
-561 = -561
   0x00005555555556d7 <+106>:	add    $0x213,%eax
+561 = 0
   0x00005555555556dc <+111>:	sub    $0x213,%eax
-561 = -561
   0x00005555555556e1 <+116>:	add    $0x213,%eax
+561 = 0
   0x00005555555556e6 <+121>:	sub    $0x213,%eax
-561 = -561
   0x00005555555556eb <+126>:	cmpl   $0x5,(%rsp)
   0x00005555555556ef <+130>:	jg     0x5555555556f7 <phase_3+138>
>=5 
   0x00005555555556f1 <+132>:	cmp    %eax,0x4(%rsp)
   0x00005555555556f5 <+136>:	je     0x5555555556fc <phase_3+143>
eax = inpt 2
   0x00005555555556f7 <+138>:	call   0x555555555dea <crash_program>
   0x00005555555556fc <+143>:	mov    0x8(%rsp),%rax
   0x0000555555555701 <+148>:	xor    %fs:0x28,%rax
   0x000055555555570a <+157>:	jne    0x55555555574e <phase_3+225>
   0x000055555555570c <+159>:	add    $0x18,%rsp
   0x0000555555555710 <+163>:	ret    
   0x0000555555555711 <+164>:	mov    $0x0,%eax
   0x0000555555555716 <+169>:	jmp    0x5555555556c8 <phase_3+91>
inp 2
   0x0000555555555718 <+171>:	mov    $0x0,%eax
   0x000055555555571d <+176>:	jmp    0x5555555556cd <phase_3+96>
inp 3
   0x000055555555571f <+178>:	mov    $0x0,%eax
   0x0000555555555724 <+183>:	jmp    0x5555555556d2 <phase_3+101>
inp 4
   0x0000555555555726 <+185>:	mov    $0x0,%eax
   0x000055555555572b <+190>:	jmp    0x5555555556d7 <phase_3+106>
inp 5
   0x000055555555572d <+192>:	mov    $0x0,%eax
   0x0000555555555732 <+197>:	jmp    0x5555555556dc <phase_3+111>
inp 6
   0x0000555555555734 <+199>:	mov    $0x0,%eax
   0x0000555555555739 <+204>:	jmp    0x5555555556e1 <phase_3+116>
inp 7
   0x000055555555573b <+206>:	mov    $0x0,%eax
   0x0000555555555740 <+211>:	jmp    0x5555555556e6 <phase_3+121>
   0x0000555555555742 <+213>:	call   0x555555555dea <crash_program>
   0x0000555555555747 <+218>:	mov    $0x0,%eax
   0x000055555555574c <+223>:	jmp    0x5555555556eb <phase_3+126>
   0x000055555555574e	call   0x555555555250 <__stack_chk_fail@plt>

